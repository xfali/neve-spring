/*
 * Copyright 2022 Xiongfa Li.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package commands

import (
	"flag"
	"fmt"
	"github.com/spf13/cobra"
	"github.com/spf13/pflag"
	"github.com/xfali/neve-spring/cmd/neve-spring-gen/commands/project"
	"github.com/xfali/neve-spring/cmd/neve-spring-gen/customargs"
	"github.com/xfali/neve-spring/pkg/generator"
	"k8s.io/gengo/args"
	"k8s.io/klog/v2"
)

var (
	gArgs   *args.GeneratorArgs
	cusArgs *customargs.NeveArgs
)

var root = cobra.Command{
	Use:   "neve-spring-gen",
	Short: "Generate code with neve spring like annotations",
	Long:  "Generate code with neve spring like annotations",
	Run: func(cmd *cobra.Command, args []string) {
		if err := customargs.Validate(gArgs); err != nil {
			klog.Fatalln(err)
		}
		fmt.Println("Generate input dir: ")
		for _, v := range gArgs.InputDirs {
			fmt.Println(v)
		}
		if len(gArgs.InputDirs) > 0 {
			fmt.Println("Generating...")
			if err := gArgs.Execute(generator.NameSystems(), generator.DefaultNameSystem(), generator.GenPackages); err != nil {
				klog.Fatalln(err)
			}
			fmt.Println("Success")
		}
	},
}

func Execute() {
	cobra.CheckErr(root.Execute())
}

func init() {
	gArgs, cusArgs = customargs.NewDefault()

	fs := root.Flags()
	AddFlags(gArgs, fs)
	cusArgs.AddFlags(fs)

	_ = flag.Set("logtostderr", "true")
	fs.AddGoFlagSet(flag.CommandLine)
	//_ = fs.Parse(os.Args[1:])
	root.AddCommand(project.Get())
}

func AddFlags(g *args.GeneratorArgs, fs *pflag.FlagSet) {
	fs.StringSliceVarP(&g.InputDirs, "input-dirs", "i", g.InputDirs, "Comma-separated list of import paths to get input types from.")
	fs.StringVarP(&g.OutputBase, "output-base", "o", g.OutputBase, "Output base; defaults to $GOPATH/src/ or ./ if $GOPATH is not set.")
	fs.StringVarP(&g.OutputPackagePath, "output-package", "p", g.OutputPackagePath, "Base package path.")
	fs.StringVarP(&g.OutputFileBaseName, "output-file-base", "O", g.OutputFileBaseName, "Base name (without .go suffix) for output files.")
	fs.StringVar(&g.GoHeaderFilePath, "go-header-file", g.GoHeaderFilePath, "File containing boilerplate header text. The string YEAR will be replaced with the current 4-digit year.")
	fs.BoolVar(&g.VerifyOnly, "verify-only", g.VerifyOnly, "If true, only verify existing output, do not write anything.")
	fs.StringVar(&g.GeneratedBuildTag, "build-tag", g.GeneratedBuildTag, "A Go build tag to use to identify files generated by this command. Should be unique.")
	fs.StringVar(&g.TrimPathPrefix, "trim-path-prefix", g.TrimPathPrefix, "If set, trim the specified prefix from --output-package when generating files.")
}
