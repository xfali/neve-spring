package plugin

import "encoding/base64"

var buildinTemplate = map[string]string{}

func init() {
	buildinTemplate["core.tmpl"] = ``
}

func getBuildTemplate(name string) string {
	d, err := base64.StdEncoding.DecodeString(buildinTemplate[name])
	if err != nil {
		return ""
	}
	return string(d)
}